#!/bin/bash

########## 引数フォーマットエラーパターン ##########
# 引数の数が2つでない場合エラー
if [ $# -ne 2 ]; then
  echo "引数の数は２個としてください"
  exit 1
fi

# 引数のどちらかに数字以外が含まれる場合エラー
if [[ ! $1 =~ ^[-]?[0-9]+(\.[0-9]*)?([eE][+-]?[0-9]+)?$ ]] || [[ ! $2 =~ ^[-]?[0-9]+(\.[0-9]*)?([eE][+-]?[0-9]+)?$ ]]; then
  echo "引数に数字以外が含まれています"
  exit 1
fi

# 引数のどちらかがマイナスの値の場合エラー
if [[ ${1:0:1} = "-" || ${2:0:1} = "-" ]]; then
  echo "引数にマイナスは使えません"
  exit 1
fi

# 引数のどちらかが小数の場合エラー
if [[ $1 =~ ^[0-9]+(\.[0-9]+)([eE][+-]?[0-9]+)?$ || $2 =~ ^[0-9]+(\.[0-9]+)([eE][+-]?[0-9]+)?$ ]]; then
  echo "引数に小数は使えません"
  exit 1
fi

# 引数のどちらかがゼロの場合エラー
if [[ $1 -eq 0 || $2 -eq 0 ]]; then
  echo "引数にゼロは使えません"
  exit 1
fi

# 引数のどちらかが bash で扱える整数の上限(9223372036854775807)を超える場合エラー
# まず、上限値よりも桁数が多い(=20桁以上の)引数は問答無用でエラーにする。
if [[ ${#1} -ge 20 || ${#2} -ge 20 ]]; then
  echo "bashで扱える数値の上限を超えています"
  exit 1
fi
# 次に「19桁だが 9223372036854775807は超える」という微妙な引数をエラーにする。
# そのままでは数値としての演算ができなかったため、最初の１桁が9で
# それ以下の18桁が 223372036854775807 を超える場合、という判定条件に分割。 
if [[ ${1:0:1} -eq 9 && ${1:1:18} -gt 223372036854775807 ]]; then
  echo "bashで扱える数値の上限を超えています"
  exit 1
fi
# 引数2 にも同様のチェックを掛ける。
if [[ ${2:0:1} -eq 9 && ${2:1:18} -gt 223372036854775807 ]]; then
  echo "bashで扱える数値の上限を超えています"
  exit 1
fi

####################################################

# ユークリッドの互除法で最大公約数を求める
a=$1
b=$2
r=$(($a % $b))

while [ $r -ne 0 ];
  do
    a=$b
    b=$r
    r=$(($a % $b))
  done
echo "最大公約数は" $b
